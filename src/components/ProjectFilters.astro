---
// Define the props with TypeScript interface
interface FilterOptions {
  years: number[];
  locations: string[];
  scopes: string[];
}

interface Props {
  filterOptions: FilterOptions;
  selectedFilters: {
    year?: number;
    location?: string;
    scope?: string;
  };
}

const { filterOptions, selectedFilters } = Astro.props;
const { years, locations, scopes } = filterOptions;
---

<div class="filters-container">
  <div class="filter-group">
    <label for="year-filter">Year</label>
    <select id="year-filter" name="year" class="filter-select" >
      <option value="">All Years</option>
      {years.sort((a, b) => b - a).map(year => (
        <option value={year} selected={selectedFilters.year === year}>{year}</option>
      ))}
    </select>
  </div>

  <div class="filter-group">
    <label for="location-filter">Location</label>
    <select id="location-filter" name="location" class="filter-select">
      <option value="">All Locations</option>
      {locations.sort().map(location => (
        <option value={location} selected={selectedFilters.location === location}>{location}</option>
      ))}
    </select>
  </div>

  <div class="filter-group">
    <label for="scope-filter">Scope</label>
    <select id="scope-filter" name="scope" class="filter-select">
      <option value="">All Scopes</option>
      {scopes.sort().map(scope => (
        <option value={scope} selected={selectedFilters.scope === scope}>{scope}</option>
      ))}
    </select>
  </div>

  <button id="filter-button" type="button" class="filter-button">Apply Filters</button>
  <a href="/projects" class="reset-button">Reset</a>
</div>

<style>
  .filters-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    max-width: 1200px;
    margin: 0 auto 2rem auto;
  }

  .filter-group {
    display: flex;
    flex-direction: column;
    flex: 1;
    min-width: 200px;
  }

  label {
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #444;
  }

  .filter-select {
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: white;
    font-size: 0.875rem;
  }

  .filter-button, .reset-button {
    padding: 0.5rem 1rem;
    margin-top: 1.5rem;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    align-self: flex-end;
  }

  .filter-button {
    background-color: #3498db;
    color: white;
  }

  .reset-button {
    background-color: #e0e0e0;
    color: #333;
  }

  .filter-button:hover {
    background-color: #2980b9;
  }

  .reset-button:hover {
    background-color: #d0d0d0;
  }

  @media (max-width: 768px) {
    .filter-group {
      width: 100%;
    }
    
    .filter-button, .reset-button {
      width: 100%;
      margin-top: 0.5rem;
    }
  }
</style>

<!-- <script>
  // Client-side script to handle filter application
  document.addEventListener('DOMContentLoaded', () => {
    // Get references to the form elements
    const yearFilter = document.getElementById('year-filter') as HTMLSelectElement;
    const locationFilter = document.getElementById('location-filter') as HTMLSelectElement;
    const scopeFilter = document.getElementById('scope-filter') as HTMLSelectElement;
    const filterButton = document.getElementById('filter-button');
    
    if (filterButton) {
      filterButton.addEventListener('click', () => {
        // Create URL parameters
        const params = new URLSearchParams();
        
        // Add selected values to URL params if they exist
        if (yearFilter && yearFilter.value) {
          params.append('year', yearFilter.value);
        }
        
        if (locationFilter && locationFilter.value) {
          params.append('location', locationFilter.value);
        }
        
        if (scopeFilter && scopeFilter.value) {
          params.append('scope', scopeFilter.value);
        }
        
        // Navigate to the filtered URL
        const queryString = params.toString();
        const url = queryString ? `/projects?${queryString}` : '/projects';
        window.location.href = url;
      });
    }
  });
</script> -->
<!-- components/ProjectFilters.astro -->
<!-- ... existing code ... -->

<script define:vars={{selectedFilters}}>
  document.addEventListener('DOMContentLoaded', () => {
    // Get references to the form elements, with type casting to HTMLSelectElement
    const yearFilter = document.getElementById('year-filter');
    const locationFilter = document.getElementById('location-filter');
    const scopeFilter = document.getElementById('scope-filter');
    const filterButton = document.getElementById('filter-button');
    const resetButton = document.querySelector('.reset-button');


    const updateFilters = () => {
        // Create URL parameters
        const params = new URLSearchParams();
        
        // Add selected values to URL params if they exist
        if (yearFilter instanceof HTMLSelectElement && yearFilter.value) {
            params.append('year', yearFilter.value)
        }
        if (locationFilter && locationFilter.value) {
            params.append('location', locationFilter.value);
        }
        if (scopeFilter && scopeFilter.value) {
            params.append('scope', scopeFilter.value);
        }
        
        // Update the URL and dispatch an event
        const queryString = params.toString();
        const newUrl = queryString ? `/projects?${queryString}` : '/projects';
        window.history.pushState({}, '', newUrl);
        window.dispatchEvent(new Event('filter-change'));
    }
    
    filterButton?.addEventListener('click', () => {updateFilters()});
    resetButton?.addEventListener('click', (e) => {e.preventDefault(); window.history.pushState({}, '', '/projects'); window.dispatchEvent(new Event('filter-change'));});

  });
</script>