---
// File: /projects/[page].astro
import Layout from '../../layouts/Layout.astro';
import ProjectGrid from '../../components/ProjectGrid.astro';
import allProjects from '../../data/projects.json';

// Define the Project type
interface Project {
  name: string;
  year: number;
  scope: string;
  description: string;
  clientUrl?: string;
  location: string;
  imageUrl?: string;
  slug: string;
}

// Generate static paths for all pages
export async function getStaticPaths() {
  const projects: Project[] = allProjects as Project[];
  const projectsPerPage = 12;
  const totalProjects = projects.length;
  const totalPages = Math.ceil(totalProjects / projectsPerPage);
  
  // Create an array for all pages except the first one (which is handled by index.astro)
  return Array.from({ length: totalPages - 1 }, (_, i) => {
    const page = i + 2; // Start from page 2
    const start = (page - 1) * projectsPerPage;
    const end = start + projectsPerPage;
    
    return {
      params: { page: String(page) },
      props: { 
        page: String(page),
        start,
        end,
        totalPages,
        totalProjects
      }
    };
  });
}

// Get props from getStaticPaths
const { page, start, end, totalPages, totalProjects } = Astro.props;
const currentPage = parseInt(page);

// Type the projects array
const projects: Project[] = allProjects as Project[];

// Sort projects by year (newest first)
projects.sort((a, b) => b.year - a.year);

// Get paginated projects for this page
const paginatedProjects = projects.slice(start, end);

// Helper function to generate pagination URLs
function getPageUrl(pageNum: number): string {
  if (pageNum === 1) return '/projects';
  return `/projects/${String(pageNum)}`; // Convert to string explicitly
}
---

<Layout title={`Our Projects - Page ${currentPage} | ONCO - Lighting Automation & LED Solutions`}>
  <main>
    <div class="hero">
      <div class="container">
        <h1>Our Projects</h1>
        <p>Discover our portfolio of over {totalProjects} commercial lighting projects completed since 2009</p>
      </div>
    </div>

    <div class="container">
      <ProjectGrid 
        projects={paginatedProjects} 
        title={`Our Projects - Page ${currentPage}`} 
      />

      <!-- Pagination Controls -->
      <div class="pagination">
        <div class="pagination-info">
          Showing {start + 1}-{Math.min(end, totalProjects)} of {totalProjects} projects
        </div>
        <div class="pagination-controls">
          {currentPage > 1 && (
            <a href={getPageUrl(currentPage - 1)} class="pagination-link">Previous</a>
          )}
          
          <div class="pagination-pages">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (
              <a 
                href={getPageUrl(pageNum)} 
                class={`pagination-link ${pageNum === currentPage ? 'active' : ''}`}
              >
                {pageNum}
              </a>
            ))}
          </div>
          
          {currentPage < totalPages && (
            <a href={getPageUrl(currentPage + 1)} class="pagination-link">Next</a>
          )}
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .hero {
    background-color: #2c3e50;
    color: white;
    padding: 4rem 0;
    margin-bottom: 2rem;
  }

  .hero h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .hero p {
    font-size: 1.25rem;
    opacity: 0.9;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .pagination {
    margin-top: 2rem;
    margin-bottom: 3rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .pagination-info {
    font-size: 0.9rem;
    color: #666;
  }

  .pagination-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .pagination-pages {
    display: flex;
    gap: 0.25rem;
  }

  .pagination-link {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    color: #333;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .pagination-link:hover {
    background-color: #f5f5f5;
  }

  .pagination-link.active {
    background-color: #3498db;
    color: white;
    border-color: #3498db;
  }

  @media (max-width: 768px) {
    .pagination-controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .pagination-pages {
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>